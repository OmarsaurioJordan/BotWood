<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_altobloq</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;

direction = irandom(359);
impulso = 0;
if s_colision(x, y, m_rad_m, o_pavo, m_rad_m, 1, id) != noone
{
    impulso = m_velroca * 0.5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !o_game.pausa
{
    if impulso != 0
    {
        impulso = clamp(impulso * m_fricmove, 0, m_velroca);
        
        //mover y detectar colision
        var otro = s_colision(x, y, m_rad_m, o_bloque, m_rad_m, 1, id);
        if otro != noone
        {
            switch otro.object_index
            {
                case o_casa:
                    s_demolecasa(otro);
                    break;
                
                case o_pavo:
                    if otro.impulso &lt;= m_velroca * 0.2 and impulso &gt; m_velroca * 0.4
                    {
                        otro.direction = point_direction(x, y, otro.x, otro.y);
                        otro.impulso = clamp(otro.impulso + impulso, 0, m_velroca);
                        impulso = m_velroca * 0.1;
                    }
                    else
                    {
                        direction = point_direction(otro.x, otro.y, x, y);
                        impulso = max(impulso, m_velroca * 0.1);
                    }
                    break;
                
                case o_globo:
                    if otro.impulso &lt; m_velglobo * 0.5
                    {
                        otro.impulso = m_velglobo * 0.5;
                    }
                    otro.direction = point_direction(x, y, otro.x, otro.y);
                    break;
                
                default:
                    direction = point_direction(otro.x, otro.y, x, y);
                    break;
            }
        }
        x += lengthdir_x(impulso * dlt, direction);
        y += lengthdir_y(impulso * dlt, direction);
        
        //limitar a dentro del circulo
        if point_distance(x, y, o_suelo.x, o_suelo.y) &gt; m_radext * o_suelo.resise * 0.9
        {
            var dirrr = point_direction(o_suelo.x, o_suelo.y, x, y);
            x = o_suelo.x + lengthdir_x(m_radext * o_suelo.resise * 0.9, dirrr);
            y = o_suelo.y + lengthdir_y(m_radext * o_suelo.resise * 0.9, dirrr);
        }
        
        depth = -y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(d_ext_bloque, 6, x, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
