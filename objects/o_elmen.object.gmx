<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>quien = -1; // 1-12
semovio = false;
antisemovio = 0;
relojmovio = 0;
relojquietin = 0;

reloj_anima[0] = irandom(m_anima);
anima[0] = irandom(3);

xxp = x;
yyp = y;
xx = x;
yy = y;
relojsalgase = m_relojlobby;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !o_game.pausa
{
    s_anima(id, 0, m_anima * (1 / 1.25), 4);
    
    //cuenta regresiva para tomarlo como No jugador
    if antisemovio &gt; 0
    {
        antisemovio = max(0, antisemovio - dlt);
        if antisemovio == 0
        {
            if point_distance(room_width * 0.25 + 150,
                room_height * 0.25 + 40, x, y) &lt;= m_radint * 0.6 or
                point_distance(room_width * 0.75 + 150,
                room_height * 0.25 + 40, x, y) &lt;= m_radint * 0.6 or
                point_distance(room_width * 0.25 + 150,
                room_height * 0.75 + 40, x, y) &lt;= m_radint * 0.6 or
                point_distance(room_width * 0.75 + 150,
                room_height * 0.75 + 40, x, y) &lt;= m_radint * 0.6
            {
                antisemovio = 2000000;
            }
            else
            {
                semovio = false;
            }
        }
    }
    /*
    //ver si regresa a menu o a juego sin jugadores
    var otro = s_colision(x, y, m_rad_m * 0.5, o_puerta, m_rad_m, 1, -1);
    if otro != noone
    {
        switch otro.seleccion
        {
            case 27:
                audio_play_sound(a_men_puerta, 99, false);
                room_goto(w_menu);
                break;
            
            case 28:
                audio_play_sound(a_men_puerta, 99, false);
                o_game.bots = "0000";
                o_game.ayudantes = "0000";
                o_game.players = "xxxxxxxxxxxx";
                room_goto(w_juego);
                break;
        }
    }*/
    
    var otro = s_colision(x, y, m_rad_m, o_semibot, m_rad_m * 8, 1, -1);
    if otro == noone
    {
        otro = s_colision(x, y, m_rad_m, o_puerta, m_rad_m * 1.5, 1, -1);
        if otro == noone
        {
            otro = s_colision(x, y, m_rad_m, o_pichirilo, m_rad_m * 0.5, 1, -1);
            if otro == noone
            {
                otro = s_colision(x, y, m_rad_m, o_pacificante, m_rad_m * 0.5, 1, -1);
                if otro == noone
                {
                    otro = s_colision(x, y, m_rad_m, o_selectia, m_rad_m * 0.5, 1, -1);
                    if otro == noone
                    {
                        otro = s_colision(x, y, m_rad_m, o_elmen, m_rad_m, 1, id);
                    }
                }
                else
                {
                    otro.alarm[0] = room_speed * 10;
                }
            }
        }
        else if otro.x &lt; room_width * 0.5
        {
            otro = noone;
        }
    }
    if otro != noone
    {
        var vvv = m_velint * 1.25 * dlt;
        var ddd = point_direction(otro.x, otro.y, x, y);
        x += lengthdir_x(vvv, ddd);
        y += lengthdir_y(vvv, ddd);
        
        x = clamp(x, 32, room_width - 32);
        y = clamp(y, 82, room_height - 32);
    }
    else
    {
        //comandos del jugador
        var dirrr;
        if keyboard_check(s_tecla(m_up, quien))
        {
            if keyboard_check(s_tecla(m_left, quien))
            {
                dirrr = 135;
            }
            else if keyboard_check(s_tecla(m_right, quien))
            {
                dirrr = 45;
            }
            else
            {
                dirrr = 90;
            }
        }
        else if keyboard_check(s_tecla(m_down, quien))
        {
            if keyboard_check(s_tecla(m_left, quien))
            {
                dirrr = 225;
            }
            else if keyboard_check(s_tecla(m_right, quien))
            {
                dirrr = 315;
            }
            else
            {
                dirrr = 270;
            }
        }
        else
        {
            if keyboard_check(s_tecla(m_left, quien))
            {
                dirrr = 180;
            }
            else if keyboard_check(s_tecla(m_right, quien))
            {
                dirrr = 0;
            }
            else
            {
                dirrr = -1;
            }
        }
        if dirrr != -1 {
            s_set_salgase(quien, 0);
            semovio = true;
            antisemovio = 6000000;
        }
        // en caso de manejo por App automaticamente localizada
        if relojsalgase != 0
        {
            // libre
            var ori = instance_nearest(o_suelo.x + 150, o_suelo.y + 40, o_pichirilo);
            s_puntoamover(ori, id, m_rad_m / 2, m_radint * (0.1 + 0.3));
            dirrr = o_gamepad.user_direction[quien - 1];
        }
        else if o_gamepad.user_ip[quien - 1] != ""
        {
            dirrr = o_gamepad.user_direction[quien - 1];
            if dirrr != -1 {
                semovio = true;
                antisemovio = 6000000;
            }
        }
        if dirrr != -1
        {
            var vvv = m_velint * 1.25 * dlt;
            x += lengthdir_x(vvv, dirrr);
            y += lengthdir_y(vvv, dirrr);
            
            x = clamp(x, 32, room_width - 32);
            y = clamp(y, 82, room_height - 32);
        }
    }
    
    xxp = xprevious;
    yyp = yprevious;
    xx = x;
    yy = y;
    
    depth = -y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if semovio
{
    alf = 1;
}
else
{
    alf = 0.666;
}
switch quien
{
    case m_rojo: s_draw_jugador(id, d_int_rojo, alf); break;
    
    case m_azul: s_draw_jugador(id, d_int_azul, alf); break;
    
    case m_verde: s_draw_jugador(id, d_int_verde, alf); break;
    
    case m_amarillo: s_draw_jugador(id, d_int_amarillo, alf); break;
    
    case m_morado: s_draw_jugador(id, d_int_morado, alf); break;
    
    case m_blanco: s_draw_jugador(id, d_int_blanco, alf); break;
    
    case m_negro: s_draw_jugador(id, d_int_negro, alf); break;
    
    case m_aqua: s_draw_jugador(id, d_int_aqua, alf); break;
    
    case m_violeta: s_draw_jugador(id, d_int_violeta, alf); break;
    
    case m_lima: s_draw_jugador(id, d_int_lima, alf); break;
    
    case m_gris: s_draw_jugador(id, d_int_gris, alf); break;
    
    case m_naranja: s_draw_jugador(id, d_int_naranja, alf); break;
    
    default: s_draw_jugador(id, d_int_rosado, alf); break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
