<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;

reloj_anima[0] = irandom(m_anima);
anima[0] = irandom(3);

alarm[0] = room_speed * 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///muestra mensaje
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !o_game.pausa
{
    s_anima(id, 0, m_anima, 4);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(d_int_rosado, anima[0], x, y);

var eso = "";
if room == w_menu or room == w_configuracion
{
    var pue = instance_nearest(mouse_x, mouse_y + 44, o_puerta);
    if point_distance(mouse_x, mouse_y + 44, pue.x, pue.y) &gt; 32
    {
        pue = -1;
    }
    else
    {
        pue = pue.seleccion;
    }
    switch pue
    {
        case 1:
            eso = "Siege, fight vs AI towers#destroy 5 edifices#they are in center of map"; break;
        case 2:
            eso = "Siege, fight vs AI towers#destroy 3 edifices#they are at north of map"; break;
        case 3:
            eso = "Siege, fight vs AI towers#destroy 1 edifice#it are at north of map"; break;
        case 4:
            eso = "Fight, MAIN game mode#player bots all vs all#war in the big city"; break;
        case 5:
            eso = "Fight, main game mode#player bots all vs all#fragmented war in central cross"; break;
        case 6:
            eso = "Fight, main game mode#player bots all vs all#war in dangerous camp of rocks"; break;
        case 7:
            eso = "Fight, main game mode#player bots all vs all#open camp war"; break;
        case 8:
            eso = "Only Mele, fight vs other#players without ammo delivery drone"; break;
        case 9:
            eso = "Only Mele, fight vs other#players in a small boxing ring"; break;
        case 10:
            eso = "Ball, each bot try to#enter the ball in his oun goal ring#all vs all play"; break;
        case 11:
            eso = "Ball, a small field where#2 bots try to enter the ball#in the others 2 bots goal ring"; break;
        case 13:
            eso = "Defence, fight vs AI bots#Protect 1 edifice#bots come from south"; break;
        case 14:
            eso = "Defence, fight vs AI bots#Protect 3 edifices#bots come from south"; break;
        case 15:
            eso = "Defence, fight vs AI bots#Protect 5 edifices#bots come from everywhere"; break;
        case 16:
            eso = "Only Distance, fight vs other#players, camp divided in#2 zones, so 2 vs 2 bots#(horizontal)"; break;
        case 17:
            eso = "Only Distance, fight vs other#players, camp divided in#2 zones, so 2 vs 2 bots#(vertical)"; break;
        case 18:
            eso = "Only Distance, fight vs AI towers#you start surrounded by them"; break;
        case 19:
            eso = "Only Distance, fight vs other#players, camp divided in#4 zones (all vs all)"; break;
        case 20:
            eso = "Race, all bots try to reach#the ring, is a linear walled#path from south to north"; break;
        case 21:
            eso = "Race, all bots try to reach#the ring and survive to the#towers, is a curvy path"; break;
        case 22:
            eso = "Race, all bots try to reach#the central ring and survive#to other player bots"; break;
        case 23:
            eso = "User defined map, created in editor#this map can contain the#same aspects and rules than others"; break;
        case 24:
            eso = "Demo map, for 2 players#because higher size#can look bad"; break;
        case 25:
            eso = "Editor, create an empty map"; break;
        case 26:
            eso = "Editor, open an existing map#F7 to import maps#F8 to export maps"; break;
        case 27:
            eso = "Back to menu"; break;
        case 29:
            eso = "Configuration, change game rules"; break;
        case 30:
            eso = "Tutorial, how to play"; break;
    }
    if eso == "" and instance_exists(o_opciones) {
        var otr = instance_nearest(mouse_x, mouse_y + 56, o_opciones);
        if point_distance(mouse_x, mouse_y + 56, otr.x, otr.y) &lt; 32 {
            switch otr.opccc
            {
                case 0:
                    eso = "For Lives#1 Hit#(fast party)"; break;
                case 1:
                    eso = "For Lives#2 Hits#(fast party)"; break;
                case 2:
                    eso = "For Lives#3 Hits#(fast party)"; break;
                case 3:
                    eso = "For Lives#4 Hits#(normal party)"; break;
                case 4:
                    eso = "For Lives#5 Hits#(slow party)"; break;
                case 5:
                    eso = "For Lives#6 Hits#(slow party)"; break;
                case 6:
                    eso = "Realistic Damage#Resistent#(slow party)"; break;
                case 7:
                    eso = "Realistic Damage#Aggressive#(fast party)"; break;
                case 8:
                    eso = "Gamepad support#2(two) players#¡reconnect pads!"; break;
                case 9:
                    eso = "Gamepad for only#one player#¡reconnect pads!"; break;
                case 10:
                    eso = "Game will gives you#reparation keys#(not supported yet)"; break;
                case 11:
                    eso = "You can't repair#the bot"; break;
                case 12:
                    eso = "The AIs will be auto#assigned to balance"; break;
                case 13:
                    eso = "You can select the#AIs in lobby"; break;
            }
        }
    }
    if eso == "" and instance_exists(o_titulos) {
        var otr = instance_nearest(mouse_x, mouse_y + 44, o_titulos);
        if point_distance(mouse_x, mouse_y + 44, otr.x, otr.y) &lt; 32 {
            switch otr.direction
            {
                case 0: // titulo
                    if room == w_menu {
                        eso = "BotWood a cooperative party game#Up to 12 players (minimum 4)" +
                            "#Smartphone App or gamepads to play";
                    }
                    else {
                        eso = "yeah is BotWood";
                    }
                    break;
                case 1: // fullscreen
                    eso = "F4 to change fullscreen"; break;
                case 2: // more games
                    eso = "F2 link to web page"; break;
                case 3: // pausa
                    eso = "Tab to pause game"; break;
                case 4: // sonido
                    eso = "Backspace to mute audio / music"; break;
            }
        }
    }
    if eso == "" and point_in_rectangle(mouse_x, mouse_y, x - 14, y - 64, x + 14, y)
    {
        if room == w_menu {
            eso = "Dont touch me creep#Better choose a map";
        }
        else {
            eso = "Confiure the game:#Gamepads" +
                "#LAN IP mask#Hits and damage";
        }
    }
    if eso == "" and room == w_configuracion {
        var xx = room_width * o_gamepad.ip_x;
        var yy = room_height * o_gamepad.ip_y;
        if point_in_rectangle(mouse_x, mouse_y,
                xx - 100, yy - 20, xx + 100, yy + 20) {
            eso = "type the LAN IP#without last digit#ex: 192.168.1.";
        }
    }
    
}
else // lobby
{
    var pue = instance_nearest(mouse_x, mouse_y + 44, o_puerta);
    if point_distance(mouse_x, mouse_y + 44, pue.x, pue.y) &gt; 32
    {
        pue = -1;
    }
    else
    {
        pue = pue.seleccion;
    }
    switch pue
    {
        case 27:
            eso = "Back to menu"; break;
    }
    with o_selectia {
        if point_in_rectangle(mouse_x, mouse_y,
                x - 14, y - 64, x + 14, y) {
            eso = "The 4 pink characters are helpers";
        }
    }
    with o_reloj {
        if point_in_rectangle(mouse_x, mouse_y,
                x - 36, y - 36, x + 36, y + 36) {
            eso = "Clic in the clock to start#Active players must be in robots";
        }
    }
    if eso == "" and point_in_rectangle(mouse_x, mouse_y,
            o_semibot.x - 70, o_semibot.y - 180, o_semibot.x + 70, o_semibot.y) {
        eso = "yeah honey, its a giant wood robot";
    }
    if eso == "" and point_in_rectangle(mouse_x, mouse_y, x - 14, y - 64, x + 14, y)
    {
        eso = "Choose a character colour avatar#Go to any of the robots circles" +
            "#Play together handling the robot";
    }
    if eso == "" {
        var otr = instance_nearest(mouse_x, mouse_y + 64, o_elmen);
        if point_distance(mouse_x, mouse_y + 64, otr.x, otr.y) &lt; 14 {
            switch otr.quien {
                case 1: eso = "Robin (red):#violent and impulsive"; break;
                case 2: eso = "Jackie (blue):#always stay calm"; break;
                case 3: eso = "Artis (green):#hates cutting down trees"; break;
                case 4: eso = "Denis (yellow):#good mechanic and eater"; break;
                case 5: eso = "Morgan (purple):#knows some witchcraft"; break;
                case 6: eso = "Zury (white):#believed to embody purity"; break;
                case 7: eso = "Shadow (black):#hates being called bola 8"; break;
                case 8: eso = "Akira (aqua):#cold scientific thought"; break;
                case 9: eso = "Rana (lime):#is very dummy"; break;
                case 10: eso = "Pinky (fuchsia):#sweet but perverted"; break;
                case 11: eso = "Charlie (orange):#crazy and guaro lover"; break;
                case 12: eso = "Poe (gray):#almost always sad"; break;
            }
        }
    }
}
draw_set_valign(fa_bottom);
draw_set_halign(fa_center);
draw_text_transformed_colour(x - 2, y - 90, eso,
    m_textoman, m_textoman, 0, c_white, c_white, c_white, c_white, 1);
draw_text_transformed_colour(x + 2, y - 90, eso,
    m_textoman, m_textoman, 0, c_white, c_white, c_white, c_white, 1);
draw_text_transformed_colour(x, y - 90, eso,
    m_textoman, m_textoman, 0, c_black, c_black, c_black, c_black, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
