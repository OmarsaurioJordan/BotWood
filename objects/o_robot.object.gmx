<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_altobloq</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>origen = -1;
direction = point_direction(x, y, o_suelo.x, o_suelo.y);

acelx = 0;
acely = 0;
acelg = 0;
velx = 0;
vely = 0;
velg = 0;

lanzado = false;

reloj_anima[0] = irandom(m_anibot);
anima[0] = irandom(3);
semovio_ani = false;

impulso = 0;
dir_imp = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !o_game.pausa
{
    s_anima(id, 0, m_anibot, 4);
    semovio_ani = false;
    
    //calcular aceleraciones en funcion de comandos
    acely = 0;
    acelx = 0;
    acelg = 0;
    
    if !origen.sobrecal
    {
        if origen.mach[m_arriba].estado &gt; 0 and origen.mach[m_arriba].activo
        {
            acely -= m_acelmove * s_cansado(origen.mach[m_arriba].estado);
        }
        if origen.mach[m_abajo].estado &gt; 0 and origen.mach[m_abajo].activo
        {
            acely += m_acelmove * s_cansado(origen.mach[m_abajo].estado);
        }
        
        if origen.mach[m_izquierda].estado &gt; 0 and origen.mach[m_izquierda].activo
        {
            acelx -= m_acelmove * s_cansado(origen.mach[m_izquierda].estado);
        }
        if origen.mach[m_derecha].estado &gt; 0 and origen.mach[m_derecha].activo
        {
            acelx += m_acelmove * s_cansado(origen.mach[m_derecha].estado);
        }
        
        if origen.mach[m_manecillas].estado &gt; 0 and origen.mach[m_manecillas].activo
        {
            acelg -= m_acelgiro * s_cansado(origen.mach[m_manecillas].estado);
        }
        if origen.mach[m_nomanecillas].estado &gt; 0 and origen.mach[m_nomanecillas].activo
        {
            acelg += m_acelgiro * s_cansado(origen.mach[m_nomanecillas].estado);
        }
    }
    
    //calcular velocidades
    vely = clamp(vely * m_fricmove + acely * dlt,
        -m_velmove * s_cansado(origen.mach[m_arriba].estado) * m_turbobot,
        m_velmove * s_cansado(origen.mach[m_abajo].estado) * m_turbobot);
    
    velx = clamp(velx * m_fricmove + acelx * dlt,
        -m_velmove * s_cansado(origen.mach[m_izquierda].estado) * m_turbobot,
        m_velmove * s_cansado(origen.mach[m_derecha].estado) * m_turbobot);
    
    velg = clamp(velg * m_fricgiro + acelg * dlt,
        -m_velgiro * s_cansado(origen.mach[m_manecillas].estado) * m_turbobot,
        m_velgiro * s_cansado(origen.mach[m_nomanecillas].estado) * m_turbobot);
    
    //calcular posiciones y colisiones
    direction += velg * dlt;
    
    var otro = s_colision(x, y, m_rad_m, o_bloque, m_rad_m, 1, id);
    
    if impulso != 0
    {
        impulso = clamp(impulso * m_fricmove, 0, m_velroca);
        
        if otro != noone
        {
            dir_imp = point_direction(otro.x, otro.y, x, y);
            if otro.object_index == o_robot
            {
                otro.dir_imp = dir_imp + 180;
                var imp = (impulso + otro.impulso) * 0.5;
                impulso = imp;
                otro.impulso = imp;
            }
            else if otro.object_index == o_pavo
            {
                otro.direction = dir_imp + 180;
                var imp = (impulso + otro.impulso) * 0.5;
                impulso = imp;
                otro.impulso = imp;
            }
        }
        x += lengthdir_x(impulso * dlt, dir_imp);
        y += lengthdir_y(impulso * dlt, dir_imp);
    }
    else
    {
        if otro == noone
        {
            y += vely * dlt;
            x += velx * dlt;
            semovio_ani = point_distance(0, 0, velx, vely) * 1000000 &gt; 5;
        }
        else
        {
            var ddd = point_direction(otro.x, otro.y, x, y);
            x += lengthdir_x(m_velmove * m_turbobot * dlt, ddd);
            y += lengthdir_y(m_velmove * m_turbobot * dlt, ddd);
        }
    }
    
    //que hacer con el colisionado
    if otro != noone
    {
        switch otro.object_index
        {
            case o_casa:
                s_demolecasa(otro);
                break;
            
            case o_arbol:
                s_arbolcosas(otro, true);
                break;
            
            case o_globo:
                if otro.impulso &lt; m_velglobo * 0.5
                {
                    otro.impulso = m_velglobo * 0.5;
                }
                otro.direction = point_direction(x, y, otro.x, otro.y);
                break;
        }
    }
    
    //limitar a dentro del circulo
    if point_distance(x, y, o_suelo.x, o_suelo.y) &gt; m_radext * o_suelo.resise * 0.95
    {
        var dirrr = point_direction(o_suelo.x, o_suelo.y, x, y);
        x = o_suelo.x + lengthdir_x(m_radext * o_suelo.resise * 0.95, dirrr);
        y = o_suelo.y + lengthdir_y(m_radext * o_suelo.resise * 0.95, dirrr);
    }
    
    depth = -y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//direccion en 16 cortes
var ddd = s_angulo16(direction);

//verificar brazos, recolector y su direccion
var bd, bm, rr, sep;
sep = 18;
rr = -1;
bd = s_cuadra16(ddd);
bm = s_invers16(bd);
if !s_chequeorobot(origen, m_ataquedis)
{
    bd = -1;
}
if !s_chequeorobot(origen, m_ataquemel)
{
    bm = -1;
}
if s_chequeorobot(origen, m_recolecion)
{
    rr = s_invers16(ddd);
}

//recolector al fondo
if rr &lt; 8 and rr &gt;= 0
{
    draw_line_width_colour(x + lengthdir_x(sep, rr * 22.5),
        y + lengthdir_y(sep, rr * 22.5) - 50,
        x + lengthdir_x(sep, rr * 22.5),
        y + lengthdir_y(sep, rr * 22.5) - 5 -
        (1 - origen.mach[m_bodega].accion / m_grua) * 45,
        2, c_gray, c_gray);
    if origen.mach[m_bodega].agarro
    {
        draw_sprite(d_ext_robot, 24, x + lengthdir_x(sep, rr * 22.5),
            y + lengthdir_y(sep, rr * 22.5) - 5 -
            (1 - origen.mach[m_bodega].accion / m_grua) * 45);
    }
    else
    {
        draw_sprite(d_ext_robot, 23, x + lengthdir_x(sep, rr * 22.5),
            y + lengthdir_y(sep, rr * 22.5) - 5 -
            (1 - origen.mach[m_bodega].accion / m_grua) * 45);
    }
    draw_sprite(d_ext_robot, 22, x + lengthdir_x(sep, rr * 22.5),
        y + lengthdir_y(sep, rr * 22.5));
}

//brazito golpeador al fondo
if bm &lt; 8 and bm != -1
{
    if lanzado
    {
        draw_sprite(d_ext_robot, 25 + ddd, x + lengthdir_x(sep, bm * 22.5),
            y + lengthdir_y(sep, bm * 22.5));
    }
    else
    {
        draw_sprite(d_ext_robot, 41 + ddd, x + lengthdir_x(sep, bm * 22.5),
            y + lengthdir_y(sep, bm * 22.5));
    }
}

//brazito disparador al fondo
if bd &lt; 9 and bd &gt; 0
{
    draw_sprite(d_ext_robot, 57 + ddd, x + lengthdir_x(sep, bd * 22.5),
        y + lengthdir_y(sep, bd * 22.5));
}

//piesitos
if !s_chequeorobot(origen, m_movilidad)
{
    draw_sprite(d_ext_robot, 1, x, y);
}
else if semovio_ani
{
    draw_sprite(d_ext_robot, 2 + anima[0], x, y);
}
else// abs(xprevious - x) &lt; 0.2 and abs(yprevious - y) &lt; 0.2
{
    draw_sprite(d_ext_robot, 0, x, y);
}

//cuerpito
draw_sprite(d_ext_robot, 6 + ddd, x, y);

//recolector al frente
if rr &gt;= 8
{
    draw_line_width_colour(x + lengthdir_x(sep, rr * 22.5),
        y + lengthdir_y(sep, rr * 22.5) - 50,
        x + lengthdir_x(sep, rr * 22.5),
        y + lengthdir_y(sep, rr * 22.5) - 5 -
        (1 - origen.mach[m_bodega].accion / m_grua) * 45,
        2, c_gray, c_gray);
    if origen.mach[m_bodega].agarro
    {
        draw_sprite(d_ext_robot, 24, x + lengthdir_x(sep, rr * 22.5),
            y + lengthdir_y(sep, rr * 22.5) - 5 -
            (1 - origen.mach[m_bodega].accion / m_grua) * 45);
    }
    else
    {
        draw_sprite(d_ext_robot, 23, x + lengthdir_x(sep, rr * 22.5),
            y + lengthdir_y(sep, rr * 22.5) - 5 -
            (1 - origen.mach[m_bodega].accion / m_grua) * 45);
    }
    draw_sprite(d_ext_robot, 22, x + lengthdir_x(sep, rr * 22.5),
        y + lengthdir_y(sep, rr * 22.5));
}

//brazito golpeador al frente
if bm &gt;= 8
{
    if lanzado
    {
        draw_sprite(d_ext_robot, 25 + ddd, x + lengthdir_x(sep, bm * 22.5),
            y + lengthdir_y(sep, bm * 22.5));
    }
    else
    {
        draw_sprite(d_ext_robot, 41 + ddd, x + lengthdir_x(sep, bm * 22.5),
            y + lengthdir_y(sep, bm * 22.5));
    }
}

//brazito disparador al frente
if bd &gt;= 9 or bd == 0
{
    draw_sprite(d_ext_robot, 57 + ddd, x + lengthdir_x(sep, bd * 22.5),
        y + lengthdir_y(sep, bd * 22.5));
}

//cabezita
if origen.cabeza
{
    draw_sprite_ext(d_ext_cabeza, origen.ident, x, y - 66,
        1, 1, direction, c_white, 1);
}
else
{
    draw_sprite_ext(d_ext_cabeza, 4 + origen.ident, x, y - 66,
        1, 1, direction, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
