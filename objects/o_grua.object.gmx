<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_maquina</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -(room_height + y);

estado = m_nadie;
municion = floor(m_municion * 0.5);

accion = 0;
agarro = false;
baja = true;
reloj_anima[0] = 0;
anima[0] = 0;

golpeado = false;
activo = true;
reloj_anima[1] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !o_game.pausa
{
    if estado &gt; 0 and activo
    {
        s_soni_int(a_int_enrrolla);
        s_anima(id, 0, m_anima * (1 / s_cansado(estado)), 4);
        s_calorhambre(instance_nearest(x, y, o_salon), estado,
            dlt * (m_calor / m_natufrio),
            -dlt * 0.2);
        if baja
        {
            accion = clamp(accion + dlt * s_cansado(estado), 0, m_grua);
            if accion == m_grua
            {
                baja = false;
            }
        }
        else
        {
            accion = clamp(accion - dlt * s_cansado(estado), 0, m_grua);
            if accion == 0
            {
                baja = true;
                if agarro and municion &lt; m_municion
                {
                    agarro = false;
                    municion++;
                    audio_play_sound(a_bot_muni, 65, false);
                }
            }
        }
    }
    s_activo(id, 1, m_reactiva);
    
    //atraer municion
    if accion &gt;= m_grua * 0.8 and !agarro and estado != m_roto
    {
        var xx, yy
        var myd = id;
        with o_robot
        {
            if origen.mach[m_bodega] == myd
            {
                var rr = s_invers16(s_angulo16(direction)) * 22.5;
                xx = x + lengthdir_x(18, rr);
                yy = y + lengthdir_y(18, rr);
            }
        }
        with o_regalo
        {
            var ddr = point_distance(x, y, xx, yy);
            if ddr &lt;= 6
            {
                myd.agarro = true;
                myd.baja = false;
                audio_play_sound(a_bot_migolpe, 50, false);
                instance_destroy();
            }
            else if ddr &lt;= m_rad_m * 3
            {
                var otro = s_colision(x, y, m_rad_m * 0.5, o_regalo, 0, 1, id)
                if otro == noone
                {
                    var vvr = (1 - ddr / (m_rad_m * 3)) * m_velroca;
                    x += lengthdir_x(vvr * dlt, point_direction(x, y, xx, yy));
                    y += lengthdir_y(vvr * dlt, point_direction(x, y, xx, yy));
                }
                else
                {
                    x += lengthdir_x(m_velroca * dlt, point_direction(otro.x, otro.y, x, y));
                    y += lengthdir_y(m_velroca * dlt, point_direction(otro.x, otro.y, x, y));
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch estado
{
    case m_rojo:
        if baja
        {
            draw_sprite_ext(d_int_rojo, 8 + anima[0], x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(d_int_rojo, 8 + (3 - anima[0]), x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
    break;
    
    case m_azul:
        if baja
        {
            draw_sprite_ext(d_int_azul, 8 + anima[0], x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(d_int_azul, 8 + (3 - anima[0]), x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
    break;
    
    case m_verde:
        if baja
        {
            draw_sprite_ext(d_int_verde, 8 + anima[0], x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(d_int_verde, 8 + (3 - anima[0]), x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
    break;
    
    case m_amarillo:
        if baja
        {
            draw_sprite_ext(d_int_amarillo, 8 + anima[0], x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(d_int_amarillo, 8 + (3 - anima[0]), x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
    break;
    
    case m_morado:
        if baja
        {
            draw_sprite_ext(d_int_morado, 8 + anima[0], x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(d_int_morado, 8 + (3 - anima[0]), x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
    break;
    
    case m_blanco:
        if baja
        {
            draw_sprite_ext(d_int_blanco, 8 + anima[0], x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(d_int_blanco, 8 + (3 - anima[0]), x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
    break;
    
    case m_negro:
        if baja
        {
            draw_sprite_ext(d_int_negro, 8 + anima[0], x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(d_int_negro, 8 + (3 - anima[0]), x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
    break;
    
    case m_aqua:
        if baja
        {
            draw_sprite_ext(d_int_aqua, 8 + anima[0], x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(d_int_aqua, 8 + (3 - anima[0]), x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
    break;
    
    case m_lima:
        if baja
        {
            draw_sprite_ext(d_int_lima, 8 + anima[0], x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(d_int_lima, 8 + (3 - anima[0]), x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
    break;
    
    case m_naranja:
        if baja
        {
            draw_sprite_ext(d_int_naranja, 8 + anima[0], x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(d_int_naranja, 8 + (3 - anima[0]), x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
    break;
    
    case m_violeta:
        if baja
        {
            draw_sprite_ext(d_int_violeta, 8 + anima[0], x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(d_int_violeta, 8 + (3 - anima[0]), x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
    break;
    
    case m_gris:
        if baja
        {
            draw_sprite_ext(d_int_gris, 8 + anima[0], x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(d_int_gris, 8 + (3 - anima[0]), x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
    break;
    
    case m_roto:
        draw_sprite_ext(d_int_objeto, 10, x, y,
            o_game.escint, o_game.escint, 0, c_white, 1);
    break;
    
    case m_nadie:
    case m_cerrado:
        draw_sprite_ext(d_int_objeto, 2, x, y,
            o_game.escint, o_game.escint, 0, c_white, 1);
    break;
    
    default:
        if baja
        {
            draw_sprite_ext(d_int_rosado, 8 + anima[0], x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(d_int_rosado, 8 + (3 - anima[0]), x, y,
                o_game.escint, o_game.escint, 0, c_white, 1);
        }
    break;
}

var desf;
if estado == m_roto
{
    desf = -16;
}
else
{
    desf = 0;
}
for (var i = 0; i &lt; municion; i++)
{
    draw_sprite_ext(d_int_objeto, 1, x, y - (desf + i * 8) * o_game.escint,
        o_game.escint, o_game.escint, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
