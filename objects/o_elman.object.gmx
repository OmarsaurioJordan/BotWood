<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>reloj_anima[0] = irandom(m_anima);
anima[0] = irandom(3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>s_anima(id, 0, m_anima * (1 / 1.5), 4);

// verificar colision
var dirrr;
var otro = s_colision(x, y, m_rad_m * 0.5, o_opciones, m_rad_m, 1, -1);
if otro != noone
{
    dirrr = point_direction(otro.x, otro.y, x, y);
}
else
{
    //comandos del jugador
    if keyboard_check(s_tecla(m_up, m_rojo))
    {
        if keyboard_check(s_tecla(m_left, m_rojo))
        {
            dirrr = 135;
        }
        else if keyboard_check(s_tecla(m_right, m_rojo))
        {
            dirrr = 45;
        }
        else
        {
            dirrr = 90;
        }
    }
    else if keyboard_check(s_tecla(m_down, m_rojo))
    {
        if keyboard_check(s_tecla(m_left, m_rojo))
        {
            dirrr = 225;
        }
        else if keyboard_check(s_tecla(m_right, m_rojo))
        {
            dirrr = 315;
        }
        else
        {
            dirrr = 270;
        }
    }
    else
    {
        if keyboard_check(s_tecla(m_left, m_rojo))
        {
            dirrr = 180;
        }
        else if keyboard_check(s_tecla(m_right, m_rojo))
        {
            dirrr = 0;
        }
        else
        {
            dirrr = -1;
        }
    }
}
if dirrr != -1
{
    var vvv = m_velint * 1.5 * dlt;
    x += lengthdir_x(vvv, dirrr);
    y += lengthdir_y(vvv, dirrr);
    
    x = clamp(x, 32, room_width - 32);
    y = clamp(y, 82, room_height - 32);
}

//verificar si entro por puerta
otro = s_colision(x, y, m_rad_m * 0.5, o_puerta, m_rad_m, 1, -1);
if otro != noone
{
    switch otro.seleccion
    {
        case 1: o_game.mundo = "bwmap_torres_c.ini"; break;
        case 2: o_game.mundo = "bwmap_torres_b.ini"; break;
        case 3: o_game.mundo = "bwmap_torres_a.ini"; break;
        case 4: o_game.mundo = "bwmap_fuego_d.ini"; break;
        case 5: o_game.mundo = "bwmap_fuego_c.ini"; break;
        case 6: o_game.mundo = "bwmap_fuego_b.ini"; break;
        case 7: o_game.mundo = "bwmap_fuego_a.ini"; break;
        case 8: o_game.mundo = "bwmap_mele_b.ini"; break;
        case 9: o_game.mundo = "bwmap_mele_a.ini"; break;
        case 10: o_game.mundo = "bwmap_globo_b.ini"; break;
        case 11: o_game.mundo = "bwmap_globo_a.ini"; break;
        case 13: o_game.mundo = "bwmap_asediadores_a.ini"; break;
        case 14: o_game.mundo = "bwmap_asediadores_b.ini"; break;
        case 15: o_game.mundo = "bwmap_asediadores_c.ini"; break;
        case 16: o_game.mundo = "bwmap_distancia_a.ini"; break;
        case 17: o_game.mundo = "bwmap_distancia_b.ini"; break;
        case 18: o_game.mundo = "bwmap_distancia_c.ini"; break;
        case 19: o_game.mundo = "bwmap_distancia_d.ini"; break;
        case 20: o_game.mundo = "bwmap_aro_a.ini"; break;
        case 21: o_game.mundo = "bwmap_aro_b.ini"; break;
        case 22: o_game.mundo = "bwmap_aro_c.ini"; break;
        case 23: o_game.mundo = "bwmap_user.ini"; break;
    }
    
    switch otro.seleccion
    {
        case 24:
            audio_play_sound(a_men_puerta, 99, false);
            room_goto(w_demo);
        break;
        
        case 25:
            audio_play_sound(a_men_puerta, 99, false);
            o_game.cargamapaedit = false;
            room_goto(w_editor);
        break;
        
        case 26:
            audio_play_sound(a_men_puerta, 99, false);
            o_game.cargamapaedit = true;
            room_goto(w_editor);
        break;
        
        case 27:
            audio_play_sound(a_men_puerta, 99, false);
            ini_open("configuracion.ini");
            if o_game.onepunch {
                ini_write_string("config", "onepunch", "1"); }
            else { ini_write_string("config", "onepunch", "0"); }
            if o_game.fatal {
                ini_write_string("config", "fatal", "1"); }
            else { ini_write_string("config", "fatal", "0"); }
            if o_game.compartepad {
                ini_write_string("config", "compartepad", "1"); }
            else { ini_write_string("config", "compartepad", "0"); }
            ini_write_string("config", "maxvidas", string(o_game.maxvidas));
            ini_close();
            room_goto(w_menu);
        break;
        
        case 29:
            audio_play_sound(a_men_puerta, 99, false);
            room_goto(w_configuracion);
        break;
        
        case 30:
            audio_play_sound(a_men_puerta, 99, false);
            room_goto(w_howto);
        break;
        
        case 0:
        case 12:
        break;
        
        default:
            audio_play_sound(a_men_puerta, 99, false);
            room_goto(w_lobby);
        break;
    }
}

//verificar cambio de opciones
if room == w_configuracion
{
    var el = instance_nearest(x, y, o_opciones);
    if point_distance(x, y, el.x, el.y) &lt; 32
    {
        switch el.opccc
        {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                with o_opciones {
                    if opccc &lt; 8 { activa = false; } }
                el.activa = true;
                o_game.onepunch = true;
                o_game.maxvidas = el.opccc + 1;
            break;
                
            case 6:
            case 7:
                with o_opciones {
                    if opccc &lt; 8 { activa = false; } }
                el.activa = true;
                o_game.onepunch = false;
                if el.opccc == 7 {
                    o_game.fatal = true; }
                else { o_game.fatal = false; }
            break;
            
            case 8:
                with o_opciones {
                    if opccc == 9 { activa = false; } }
                el.activa = true;
                o_game.compartepad = true;
            break;
            
            case 9:
                with o_opciones {
                    if opccc == 8 { activa = false; } }
                el.activa = true;
                o_game.compartepad = false;
            break;
        }
    }
}

depth = -y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if abs(xprevious - x) &lt; 1 and abs(yprevious - y) &lt; 1
{
    draw_sprite(d_int_rosado, anima[0], x, y);
}
else
{
    draw_sprite(d_int_rosado, 4 + anima[0], x, y);
}

if room == w_menu
{
    var el = instance_nearest(x, y, o_titulos);
    if point_distance(x, y, el.x, el.y) &lt; 75
    {
        var eso = "";
        switch el.direction
        {
            case 1:
                eso = "F4: Full Screen"; break;
            case 2:
                eso = "F2: More Games#(F1: obtain gamepad App)"; break;
            case 3:
                eso = "Tab: Pause"; break;
            case 4:
                eso = "Backspace: Sound"; break;
        }
        draw_set_valign(fa_bottom);
        draw_set_halign(fa_center);
        draw_text_transformed_colour(x - 2, y - 90, eso,
            m_textoman, m_textoman, 0, c_white, c_white, c_white, c_white, 1);
        draw_text_transformed_colour(x + 2, y - 90, eso,
            m_textoman, m_textoman, 0, c_white, c_white, c_white, c_white, 1);
        draw_text_transformed_colour(x, y - 90, eso,
            m_textoman, m_textoman, 0, c_black, c_black, c_black, c_black, 1);
    }
}
else if room == w_configuracion
{
    var el = instance_nearest(x, y, o_opciones);
    if point_distance(x, y, el.x, el.y) &lt; 75
    {
        var eso = "";
        switch el.opccc
        {
            case 0:
                eso = "For Lives#1 Hit#(fast party)"; break;
            case 1:
                eso = "For Lives#2 Hits#(fast party)"; break;
            case 2:
                eso = "For Lives#3 Hits#(fast party)"; break;
            case 3:
                eso = "For Lives#4 Hits#(normal party)"; break;
            case 4:
                eso = "For Lives#5 Hits#(slow party)"; break;
            case 5:
                eso = "For Lives#6 Hits#(slow party)"; break;
            case 6:
                eso = "Realistic Damage#Resistent#(slow party)"; break;
            case 7:
                eso = "Realistic Damage#Aggressive#(fast party)"; break;
            case 8:
                eso = "Gamepad support#2(two) players#¡reconnect pads!"; break;
            case 9:
                eso = "Gamepad for only#one player#¡reconnect pads!"; break;
            case 10:
                eso = "Game will gives you#reparation keys#(not supported yet)"; break;
            case 11:
                eso = "You can't repair#the bot"; break;
            case 12:
                eso = "The AIs will be auto#assigned to balance"; break;
            case 13:
                eso = "You can select the#AIs in lobby"; break;
        }
        draw_set_valign(fa_bottom);
        draw_set_halign(fa_center);
        draw_text_transformed_colour(x - 2, y - 90, eso,
            m_textoman, m_textoman, 0, c_white, c_white, c_white, c_white, 1);
        draw_text_transformed_colour(x + 2, y - 90, eso,
            m_textoman, m_textoman, 0, c_white, c_white, c_white, c_white, 1);
        draw_text_transformed_colour(x, y - 90, eso,
            m_textoman, m_textoman, 0, c_black, c_black, c_black, c_black, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
