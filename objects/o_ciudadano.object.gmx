<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x += 1 - random(2);
y += 1 - random(2);

quien = m_nadie;
automatico = 0;
relojsalgase = m_relojlobby;

reloj_errar = irandom(m_errar);
mov_ia = true;
dir_ia = irandom(359);

reloj_anima[0] = irandom(m_anima);
anima[0] = irandom(3);

alarm[0] = 5 + irandom(room_speed * 3);
gritos = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(a_tipos_nooo, 15, false);
gritos--;
if gritos &gt; 0
{
    alarm[0] = room_speed + irandom(room_speed * 2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !o_game.pausa
{
    s_anima(id, 0, m_anima, 4);
    s_errar(id, m_errar, m_errar, 30, 0.333, 0.666);
    
    //moverse y detectar colision
    var otro = s_colision(x, y, m_rad_u * o_game.eschum, o_bloque,
        m_rad_m, 1, -1);
    if otro != noone
    {
        if otro.object_index == o_globo
        {
            otro = noone;
        }
    }
    if otro != noone
    {
        var ddd = point_direction(otro.x, otro.y, x, y);
        x += lengthdir_x(m_velint * dlt * o_game.eschum, ddd);
        y += lengthdir_y(m_velint * dlt * o_game.eschum, ddd);
        dir_ia = irandom(359);
    }
    else if quien == m_nadie
    {
        if mov_ia
        {
            x += lengthdir_x(m_velint * dlt * o_game.eschum * 0.5, dir_ia);
            y += lengthdir_y(m_velint * dlt * o_game.eschum * 0.5, dir_ia);
        }
    }
    else
    {
        //ver si automatico
        if automatico != 0
        {
            automatico = max(0, automatico - dlt);
        }
        
        //comandos del jugador
        var dirrr;
        if keyboard_check(s_tecla(m_up, quien))
        {
            if keyboard_check(s_tecla(m_left, quien))
            {
                dirrr = 135;
            }
            else if keyboard_check(s_tecla(m_right, quien))
            {
                dirrr = 45;
            }
            else
            {
                dirrr = 90;
            }
        }
        else if keyboard_check(s_tecla(m_down, quien))
        {
            if keyboard_check(s_tecla(m_left, quien))
            {
                dirrr = 225;
            }
            else if keyboard_check(s_tecla(m_right, quien))
            {
                dirrr = 315;
            }
            else
            {
                dirrr = 270;
            }
        }
        else
        {
            if keyboard_check(s_tecla(m_left, quien))
            {
                dirrr = 180;
            }
            else if keyboard_check(s_tecla(m_right, quien))
            {
                dirrr = 0;
            }
            else
            {
                dirrr = -1;
            }
        }
        // en caso de manejo por App automaticamente localizada
        if relojsalgase != 0
        {
            // libre
        }
        else if o_gamepad.user_ip[quien - 1] != ""
        {
            dirrr = o_gamepad.user_direction[quien - 1];
        }
        
        //ver si se mueve o no
        if dirrr != -1
        {
            automatico = m_relojlobby;
            x += lengthdir_x(m_velint * dlt * o_game.eschum * 0.5, dirrr);
            y += lengthdir_y(m_velint * dlt * o_game.eschum * 0.5, dirrr);
            dir_ia = dirrr;
        }
        else if mov_ia and automatico == 0
        {
            x += lengthdir_x(m_velint * dlt * o_game.eschum * 0.5, dir_ia);
            y += lengthdir_y(m_velint * dlt * o_game.eschum * 0.5, dir_ia);
        }
    }
    
    //limitar a dentro del circulo
    if point_distance(x, y, o_suelo.x, o_suelo.y) &gt; m_radext * o_suelo.resise
    {
        if quien == m_nadie
        {
            instance_destroy();
        }
        else
        {
            var dddd = point_direction(o_suelo.x, o_suelo.y, x, y);
            x = o_suelo.x + lengthdir_x(m_radext * o_suelo.resise, dddd);
            y = o_suelo.y + lengthdir_y(m_radext * o_suelo.resise, dddd);
            dir_ia = point_direction(x, y, o_suelo.x, o_suelo.y);
        }
    }
    
    //ver si entra al robot
    if quien != m_nadie
    {
        var bot = instance_nearest(x, y, o_robot);
        if point_distance(x, y, bot.x, bot.y) &lt;= m_rad_m * 4 and
            !s_chequeorobot(bot.origen, m_todomalo)
        {
            if bot.origen.mach[m_bodega].estado != m_roto and
                bot.origen.mach[m_bodega].accion &gt;= m_grua * 0.8
            {
                var rr = s_invers16(s_angulo16(bot.direction)) * 22.5;
                if s_colision(bot.x + lengthdir_x(18, rr),
                    bot.y + lengthdir_y(18, rr), m_rad_m, id, 0, 1, -1) != noone
                {
                    var u = instance_create(bot.origen.mach[m_bodega].x,
                        bot.origen.mach[m_bodega].y, o_jugador);
                    u.quien = quien;
                    audio_play_sound(a_int_bien, 50, false);
                    instance_destroy();
                }
            }
        }
    }
    
    depth = -y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var piel;
switch quien
{
    case m_rojo: piel = d_int_rojo; break;
    case m_azul: piel = d_int_azul; break;
    case m_verde: piel = d_int_verde; break;
    case m_amarillo: piel = d_int_amarillo; break;
    case m_morado: piel = d_int_morado; break;
    case m_blanco: piel = d_int_blanco; break;
    case m_negro: piel = d_int_negro; break;
    case m_aqua: piel = d_int_aqua; break;
    case m_violeta: piel = d_int_violeta; break;
    case m_gris: piel = d_int_gris; break;
    case m_naranja: piel = d_int_naranja; break;
    case m_lima: piel = d_int_lima; break;
    default: piel = d_int_rosado; break;
}

if x != xprevious or y != yprevious
{
    draw_sprite_ext(piel, 4 + anima[0], x, y, o_game.eschum,
        o_game.eschum, 0, c_white, 1);
}
else
{
    draw_sprite_ext(piel, anima[0], x, y, o_game.eschum,
        o_game.eschum, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
