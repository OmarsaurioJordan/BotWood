<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_altobloq</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;
direction = irandom(359);
adondevoy = irandom(359);
velg = 0;
acelm = 0;
velm = 0;

blanco = -1;

reloj_anima[0] = irandom(m_anibot);
anima[0] = irandom(3);
semovio_ani = false;

reloj_errar = irandom(m_asedioerrar);
mov_ia = true;
dir_ia = irandom(359);

retirada = false;
aburrido = false;

reloj_loco = irandom(m_asedioloco);
loco = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room != w_editor
{
    o_game.alarm[1] = room_speed * 10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !o_game.pausa
{
    s_anima(id, 0, m_anibot, 4);
    s_errar(id, m_asedioerrar * 0.5, m_asedioerrar * 0.5, 30, 0.25, 0.25);
    semovio_ani = false;
    
    //reloj poner bot en mision o a errar
    reloj_loco -= dlt;
    if reloj_loco &lt;= 0
    {
        reloj_loco = m_asedioloco * 0.75 + irandom(m_asedioloco * 0.25);
        if retirada or aburrido
        {
            loco = choose(true, false, false);
        }
        else
        {
            loco = choose(true, true, false);
        }
    }
    
    //seleccionar blanco: edificio
    if instance_exists(o_edificio)
    {
        aburrido = false;
        blanco = instance_nearest(x, y, o_edificio);
    }
    else
    {
        aburrido = true;
        blanco = -1;
    }
    
    //calculo direccion y aceleracion
    var sonara = false;
    acelm = 0;
    if loco
    {
        if mov_ia
        {
            adondevoy = dir_ia;
            acelm = m_acelmove;
            sonara = true;
        }
    }
    else if retirada or aburrido
    {
        adondevoy = point_direction(o_suelo.x, o_suelo.y, x, y);
        acelm = m_acelmove;
        sonara = true;
    }
    else if blanco != -1
    {
        adondevoy = point_direction(x, y, blanco.x, blanco.y);
        acelm = m_acelmove;
        sonara = true;
    }
    if sonara and !audio_is_playing(a_bot_camina)
    {
        audio_play_sound(a_bot_camina, 5, false);
    }
    
    //correccion de direccion para evadir obstaculos
    var lado = choose(-1, 1);
    var subemira = true;
    var mira = 0;
    for (var i = 0; i &lt; 13; i++)
    {
        lado *= -1;
        subemira = !subemira;
        if subemira
        {
            mira += 15;
        }
        if !s_colinea(x, y, adondevoy + mira * lado, m_laser * 0.2,
            m_rad_m * 0.5, o_bloque, m_rad_m, id)
        {
            adondevoy += mira * lado;
            break;
        }
    }
    
    //calculo de velocidad
    velm = clamp(velm * m_fricmove + acelm * dlt,
        -m_velmove, m_velmove);
    
    //calculo colisiones y movimiento
    var otro = s_colision(x, y, m_rad_m, o_bloque, m_rad_m, 1, id);
    if otro == noone
    {
        x += lengthdir_x(velm * dlt, adondevoy);
        y += lengthdir_y(velm * dlt, adondevoy);
        semovio_ani = velm * 1000000 &gt; 3;
    }
    else
    {
        adondevoy = point_direction(otro.x, otro.y, x, y);
        x += lengthdir_x(m_velmove * dlt, adondevoy);
        y += lengthdir_y(m_velmove * dlt, adondevoy);
        dir_ia = adondevoy;
        switch otro.object_index
        {
            case o_casa:
                s_demolecasa(otro);
                break;
            
            case o_arbol:
                s_arbolcosas(otro, true);
                break;
            
            case o_globo:
                if otro.impulso &lt; m_velglobo * 0.5
                {
                    otro.impulso = m_velglobo * 0.5;
                }
                otro.direction = point_direction(x, y, otro.x, otro.y);
                break;
        }
    }
    
    //comprobar colision con blanco: edificio
    if blanco != -1 and !retirada
    {
        otro = s_colision(x, y, m_rad_m * 1.5, blanco, m_rad_m, 1, -1);
        if otro != noone
        {
            var ag = point_direction(x, y, blanco.x, blanco.y);
            if abs(angle_difference(ag, direction)) &lt;= 30 and
                otro.estructura != 0
            {
                instance_create(x + lengthdir_x(20, direction),
                    y + lengthdir_y(20, direction), o_exploproy);
                s_demoledificio(blanco, true);
                retirada = true;
            }
        }
    }
    
    //comprobar si irse del mapa o limitarse
    if point_distance(x, y, o_suelo.x, o_suelo.y) &gt; m_radext * o_suelo.resise
    {
        if retirada or aburrido
        {
            instance_destroy();
        }
        else
        {
            adondevoy = point_direction(o_suelo.x, o_suelo.y, x, y);
            x = o_suelo.x + lengthdir_x(m_radext * o_suelo.resise, adondevoy);
            y = o_suelo.y + lengthdir_y(m_radext * o_suelo.resise, adondevoy);
            dir_ia = point_direction(x, y, o_suelo.x, o_suelo.y);
        }
    }
    
    //mirar a punto donde se dirige
    var pl;
    otro = s_colision(x, y, 0, o_edificio, m_laser * 0.2, 1, -1);
    if otro != noone
    {
        pl = 2;
    }
    else
    {
        pl = 1;
    }
    var ad = angle_difference(direction, adondevoy);
    if abs(ad) &gt;= 4
    {
        velg = m_velgiro * pl * sign(ad);
    }
    else
    {
        velg *= m_fricgiro;
    }
    direction -= velg * 1.75 * dlt;
    
    depth = -y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//abs(xprevious - x) &lt; 0.2 and abs(yprevious - y) &lt; 0.2
if semovio_ani
{
    draw_sprite(d_ext_robot, 2 + anima[0], x, y);
}
else
{
    draw_sprite(d_ext_robot, 0, x, y);
}

draw_sprite(d_ext_robot, 78, x, y);

if retirada
{
    draw_sprite(d_ext_robot, 25 + s_angulo16(direction), x, y);
}
else
{
    draw_sprite(d_ext_robot, 41 + s_angulo16(direction), x, y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
