<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>persistent = true;
depth = -room_height;

for (var i = 0; i &lt; 12; i++)
{
    elcontrol[i, 0] = -1;
    elcontrol[i, 1] = -1;
    gamepad_set_axis_deadzone(i, 0.05);
}

mydelta = 0;
ini_open("configuracion.ini");
mascara_red = ini_read_string("config", "mascara_red", "192.168.1.");
ini_close();
reloj_red = 4;
reloj_ping = 0;
puerto = 4749;
servidor = network_create_socket_ext(network_socket_udp, puerto);
if servidor &lt; 0 {
    show_message_async("Fail connecting with UDP server, No App gamepads");
}
for (var i = 0; i &lt; 12; i++)
{
    user_ip[i] = "";
    user_final[i] = 0; // ping desconexion
    user_direction[i] = -1;
}
edita_ip = mascara_red;
ip_x = 0.6; // posicion del boton
ip_y = 0.3;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mydelta
mydelta = min(0.1, delta_time * 0.000001);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// escribir la IP
if room == w_configuracion {
    if keyboard_check_pressed(vk_anykey) {
        var xx = room_width * ip_x;
        var yy = room_height * ip_y;
        if point_in_rectangle(mouse_x, mouse_y,
                xx - 100, yy - 20, xx + 100, yy + 20) {
            switch keyboard_key {
                case vk_backspace:
                    if edita_ip != "" {
                        if string_length(edita_ip) == 1 {
                            edita_ip = "";
                        }
                        else {
                            edita_ip = string_copy(edita_ip, 1, string_length(edita_ip) - 1);
                        }
                    }
                    break;
                default:
                    var c = keyboard_lastchar;
                    keyboard_lastchar = '';
                    if string_length(edita_ip) &lt; 12 and
                            string_count(c, "0123456789.") == 1 {
                        edita_ip += c;
                    }
                    break;
            }
        }
    }
}

// envio mensajes hola UDP
reloj_red -= mydelta;
if reloj_red &lt;= 0 {
    reloj_red += 4;
    var buf = buffer_create(1, buffer_grow, 1);
    buffer_seek(buf, buffer_seek_start, 0);
    buffer_write(buf, buffer_string, "botwood|0|x");
    var tll = buffer_tell(buf);
    for (var i = 1; i &lt; 255; i++) {
        network_send_udp_raw(servidor, mascara_red + string(i), puerto, buf, tll);
    }
    buffer_delete(buf);
}

// envio modo actual a Apps
reloj_ping -= mydelta;
if reloj_ping &lt;= 0 {
    reloj_ping += 0.1;
    var buf = buffer_create(1, buffer_grow, 1);
    buffer_seek(buf, buffer_seek_start, 0);
    if room == w_lobby {
        buffer_write(buf, buffer_string, "botwood|2|x");
    }
    else if room == w_juego or room == w_demo {
        buffer_write(buf, buffer_string, "botwood|3|x");
    }
    else {
        buffer_write(buf, buffer_string, "botwood|1|x");
    }
    var tll = buffer_tell(buf);
    for (var i = 0; i &lt; 12; i++) {
        if user_ip[i] != "" {
            network_send_udp_raw(servidor, user_ip[i], puerto, buf, tll);
        }
    }
    buffer_delete(buf);
}

// manejo
for (var i = 0; i &lt; 12; i++)
{
    // networking
    if user_ip[i] != "" {
        user_final[i] -= mydelta;
        if user_final[i] &lt;= 0 {
            user_ip[i] = "";
            user_final[i] = 0;
            user_direction[i] = -1;
            s_set_salgase(1 + i, m_relojlobby);
        }
    }
    
    // gamepads
    if elcontrol[i, 0] != -1
    {
        // quitar app
        if user_ip[i] != "" {
            var buf = buffer_create(1, buffer_grow, 1);
            buffer_seek(buf, buffer_seek_start, 0);
            buffer_write(buf, buffer_string, "botwood|1|x");
            network_send_udp_raw(servidor, user_ip[i], puerto, buf, buffer_tell(buf));
            buffer_delete(buf);
            s_set_salgase(1 + i, m_relojlobby);
        }
        // gamepad
        if gamepad_axis_value(i, gp_axislh) &gt;= 0.5 {
            s_set_salgase(1 + i, 0);
            keyboard_key_press(s_tecla(m_right, elcontrol[i, 0])); }
        else {
            keyboard_clear(s_tecla(m_right, elcontrol[i, 0])); }
        
        if gamepad_axis_value(i, gp_axislh) &lt;= -0.5 {
            s_set_salgase(1 + i, 0);
            keyboard_key_press(s_tecla(m_left, elcontrol[i, 0])); }
        else {
            keyboard_clear(s_tecla(m_left, elcontrol[i, 0])); }
        
        if gamepad_axis_value(i, gp_axislv) &gt;= 0.5 {
            s_set_salgase(1 + i, 0);
            keyboard_key_press(s_tecla(m_down, elcontrol[i, 0])); }
        else {
            keyboard_clear(s_tecla(m_down, elcontrol[i, 0])); }
        
        if gamepad_axis_value(i, gp_axislv) &lt;= -0.5 {
            s_set_salgase(1 + i, 0);
            keyboard_key_press(s_tecla(m_up, elcontrol[i, 0])); }
        else {
            keyboard_clear(s_tecla(m_up, elcontrol[i, 0])); }
    }
    if elcontrol[i, 1] != -1
    {
        // quitar app
        if user_ip[i] != "" {
            var buf = buffer_create(1, buffer_grow, 1);
            buffer_seek(buf, buffer_seek_start, 0);
            buffer_write(buf, buffer_string, "botwood|1|x");
            network_send_udp_raw(servidor, user_ip[i], puerto, buf, buffer_tell(buf));
            buffer_delete(buf);
            s_set_salgase(1 + i, m_relojlobby);
        }
        // gamepad
        if gamepad_axis_value(i, gp_axisrh) &gt;= 0.5 {
            s_set_salgase(1 + i, 0);
            keyboard_key_press(s_tecla(m_right, elcontrol[i, 1])); }
        else {
            keyboard_clear(s_tecla(m_right, elcontrol[i, 1])); }
        
        if gamepad_axis_value(i, gp_axisrh) &lt;= -0.5 {
            s_set_salgase(1 + i, 0);
            keyboard_key_press(s_tecla(m_left, elcontrol[i, 1])); }
        else {
            keyboard_clear(s_tecla(m_left, elcontrol[i, 1])); }
        
        if gamepad_axis_value(i, gp_axisrv) &gt;= 0.5 {
            s_set_salgase(1 + i, 0);
            keyboard_key_press(s_tecla(m_down, elcontrol[i, 1])); }
        else {
            keyboard_clear(s_tecla(m_down, elcontrol[i, 1])); }
        
        if gamepad_axis_value(i, gp_axisrv) &lt;= -0.5 {
            s_set_salgase(1 + i, 0);
            keyboard_key_press(s_tecla(m_up, elcontrol[i, 1])); }
        else {
            keyboard_clear(s_tecla(m_up, elcontrol[i, 1])); }
    }
    if elcontrol[i, 0] != -1 or elcontrol[i, 1] != -1
    {
        /* No pausa
        if gamepad_button_check_released(i, gp_start) {
            keyboard_key_release(vk_tab); }
        else if gamepad_button_check(i, gp_start) {
            keyboard_key_press(vk_tab); }
        */
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_map_find_value(async_load, "event_type") == "gamepad discovered"
{
    if o_game.compartepad
    {
        var cc = -1;
        for (var n = 1; n &lt;= 12; n++)
        {
            for (var i = 0; i &lt; 12; i++)
            {
                if elcontrol[i, 0] == n or elcontrol[i, 1] == n { break; }
                else if i == 11 { cc = n; }
            }
            if cc != -1 { break; }
        }
        if cc == -1
        {
            for (var i = 11; i &gt;= 0; i--)
            {
                if elcontrol[i, 1] != -1
                {
                    cc = elcontrol[i, 1];
                    elcontrol[i, 1] = -1;
                    break;
                }
            }
            elcontrol[ds_map_find_value(async_load, "pad_index"), 0] = cc;
        }
        else
        {
            elcontrol[ds_map_find_value(async_load, "pad_index"), 0] = cc;
            cc = -1;
            for (var n = 12; n &gt;= 1; n--)
            {
                for (var i = 0; i &lt; 12; i++)
                {
                    if elcontrol[i, 0] == n or elcontrol[i, 1] == n { break; }
                    else if i == 11 { cc = n; }
                }
                if cc != -1 { break; }
            }
            elcontrol[ds_map_find_value(async_load, "pad_index"), 1] = cc;
        }
    }
    else
    {
        for (var i = 0; i &lt; 12; i++)
        {
            elcontrol[i, 1] = -1;
        }
        var cc = -1;
        for (var n = 1; n &lt;= 12; n++)
        {
            for (var i = 0; i &lt; 12; i++)
            {
                if elcontrol[i, 0] == n { break; }
                else if i == 11 { cc = n; }
            }
            if cc != -1 { break; }
        }
        elcontrol[ds_map_find_value(async_load, "pad_index"), 0] = cc;
    }
    gamepad_set_button_threshold(ds_map_find_value(async_load, "pad_index"), 0.5);
}
else
{
    var i = ds_map_find_value(async_load, "pad_index");
    elcontrol[i, 0] = -1;
    elcontrol[i, 1] = -1;
    s_set_salgase(1 + i, m_relojlobby);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_map_find_value(async_load, "type") == network_type_data {
    var paquete = ds_map_find_value(async_load, "buffer");
    buffer_seek(paquete, buffer_seek_start, 0);
    var txt = buffer_read(paquete, buffer_string);
    buffer_delete(paquete);
    var msj = s_split(txt, "|", false);
    if is_array(msj) { if array_length_1d(msj) == 5 { if msj[0] == "botwood" {
        // conexion
        var ipp = ds_map_find_value(async_load, "ip");
        var usr = real(msj[3]); // 0-11
        if usr &lt; 0 or usr &gt;= 12 {
            exit;
        }
        var ok = true;
        if user_ip[usr] != "" and user_ip[usr] != ipp {
            // el lugar esta ocupado, solicitar desconexion
            var buf = buffer_create(1, buffer_grow, 1);
            buffer_seek(buf, buffer_seek_start, 0);
            buffer_write(buf, buffer_string, "botwood|1|x");
            network_send_udp_raw(servidor, ipp, puerto, buf, buffer_tell(buf));
            buffer_delete(buf);
            ok = false;
        }
        // actualizar conexion
        if ok {
            for (var i = 0; i &lt; 12; i++) {
                if user_ip[i] == ipp {
                    user_ip[i] = "";
                    user_final[i] = 0;
                    user_direction[i] = -1;
                    s_set_salgase(1 + i, m_relojlobby);
                }
            }
            user_ip[usr] = ipp;
            user_final[usr] = 6;
            s_set_salgase(1 + usr, 0);
        }
        // lobby
        if ok and msj[1] == "4" and room == w_lobby {
            with o_elmen
            {
                if quien == 1 + usr
                {
                    el = id;
                    break;
                }
            }
            var rrr = 0.3;
            switch real(msj[2])
            {
                case 0:
                    ori = instance_nearest(0, 0, o_pichirilo);
                    s_puntoamover(ori, el, m_rad_m / 2, m_radint * rrr);
                    break;
                
                case 1:
                    ori = instance_nearest(room_width, 0, o_pichirilo);
                    s_puntoamover(ori, el, m_rad_m / 2, m_radint * rrr);
                    break;
                
                case 2:
                    ori = instance_nearest(0, room_height, o_pichirilo);
                    s_puntoamover(ori, el, m_rad_m / 2 , m_radint * rrr);
                    break;
                
                case 3:
                    ori = instance_nearest(room_width, room_height, o_pichirilo);
                    s_puntoamover(ori, el, m_rad_m / 2, m_radint * rrr);
                    break;
                
                default:
                    ori = instance_nearest(o_suelo.x + 150, o_suelo.y + 40, o_pichirilo);
                    s_puntoamover(ori, el, m_rad_m / 2, m_radint * (0.1 + rrr));
                    break;
            }
        }
        // game
        else if ok and msj[1] == "5" and (room == w_juego or room == w_demo) {
            var el = noone;
            var ori = noone;
            with o_jugador
            {
                if quien == 1 + usr
                {
                    el = id;
                    ori = instance_nearest(x, y, o_salon);
                    break;
                }
            }
            if el != noone
            {
                var maq = real(msj[2]);
                if maq &lt; 0 or maq &gt;= 13 {
                    // libre
                    s_puntoamover(ori, el, m_rad_u * o_game.escint / 2, 60 * o_game.escint);
                }
                else {
                    // en maquina
                    var otro = ori.mach[maq];
                    if otro.estado == 1 + usr
                    {
                        user_direction[usr] = -1;
                    }
                    else if otro.estado == m_nadie // 0
                    {
                        user_direction[usr] = point_direction(el.x, el.y, otro.x, otro.y);
                    }
                    else
                    {
                        s_puntoamover(ori, el, m_rad_u * o_game.escint / 2, 60 * o_game.escint);
                    }
                }
            }
            // mover ciudadano por fuera del robot
            else {
                with o_ciudadano {
                    if quien == 1 + usr {
                        el = id;
                        break;
                    }
                }
                if el != noone {
                    var maq = real(msj[2]);
                    switch maq {
                        case 1: user_direction[usr] = 90; break; // arriba
                        case 2: user_direction[usr] = 270; break; // abajo
                        case 3: user_direction[usr] = 180; break; // izquierda
                        case 4: user_direction[usr] = 0; break; // derecha
                        case 5: user_direction[usr] = 60; break; // manecillas
                        case 6: user_direction[usr] = 120; break; // nomanecillas
                        case 7: user_direction[usr] = 150; break; // disparo
                        case 8: user_direction[usr] = 30; break; // golpe
                        case 9: user_direction[usr] = 210; break; // tensadisp
                        case 10: user_direction[usr] = 330; break; // tensagolpe
                        case 11: user_direction[usr] = 240; break; // bodega
                        case 12: user_direction[usr] = 300; break; // comida
                        default: user_direction[usr] = -1; break;
                    }
                }
            }
        }
    } } }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ini_open("configuracion.ini");
ini_write_string("config", "mascara_red", mascara_red);
ini_close();
network_destroy(servidor);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room == w_configuracion {
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    var t = edita_ip;
    var c = c_black;
    if t == "" {
        t = "192.168.1.";
        c = c_gray;
    }
    draw_text_transformed_colour(room_width * ip_x, room_height * ip_y,
        t, 2.5, 2.5, 0, c, c, c, c, 1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
