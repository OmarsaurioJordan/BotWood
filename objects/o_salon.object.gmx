<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -room_height;

for (var i = 0; i &lt; 360; i += 10)
{
    instance_create(
        x + lengthdir_x(m_radint * o_game.escint, i),
        y + lengthdir_y(m_radint * o_game.escint, i),
        o_pichirilo);
}

sobrecal = false;
calor = 0;
autodestruir = 60000000;
vidas = o_game.maxvidas;

cabeza = true;
laser = true;
reloj_cabeza = 0;
if x &lt; room_width * 0.5
{
    if y &lt; room_height * 0.5
    {
        ident = 0;
    }
    else
    {
        ident = 2;
    }
}
else
{
    if y &lt; room_height * 0.5
    {
        ident = 1;
    }
    else
    {
        ident = 3;
    }
}

var dp = point_direction(x, y, o_suelo.x, o_suelo.y);
var ff = instance_create(
    x + lengthdir_x(m_radint * o_game.escint * 0.35, dp),
    y + lengthdir_y(m_radint * o_game.escint * 0.35, dp),
    o_pichirilo);
ff.direction = 11 + ident;

mach[m_refrigera] = instance_create(x, y, o_ventilador);

var d = 0.75;

mach[m_arriba] = instance_create(
    x + lengthdir_x(m_radint * o_game.escint * d, 90),
    y + lengthdir_y(m_radint * o_game.escint * d, 90),
    o_pedales);
mach[m_abajo] = instance_create(
    x + lengthdir_x(m_radint * o_game.escint * d, 270),
    y + lengthdir_y(m_radint * o_game.escint * d, 270),
    o_pedales);
mach[m_izquierda] = instance_create(
    x + lengthdir_x(m_radint * o_game.escint * d, 180),
    y + lengthdir_y(m_radint * o_game.escint * d, 180),
    o_pedales);
mach[m_derecha] = instance_create(
    x + lengthdir_x(m_radint * o_game.escint * d, 0),
    y + lengthdir_y(m_radint * o_game.escint * d, 0),
    o_pedales);

mach[m_manecillas] = instance_create(
    x + lengthdir_x(m_radint * o_game.escint * d, 60),
    y + lengthdir_y(m_radint * o_game.escint * d, 60),
    o_manivela);
mach[m_nomanecillas] = instance_create(
    x + lengthdir_x(m_radint * o_game.escint * d, 120),
    y + lengthdir_y(m_radint * o_game.escint * d, 120),
    o_manivela);

mach[m_disparo] = instance_create(
    x + lengthdir_x(m_radint * o_game.escint * d, 150),
    y + lengthdir_y(m_radint * o_game.escint * d, 150),
    o_boton);
mach[m_golpe] = instance_create(
    x + lengthdir_x(m_radint * o_game.escint * d, 30),
    y + lengthdir_y(m_radint * o_game.escint * d, 30),
    o_boton);

mach[m_tensadisp] = instance_create(
    x + lengthdir_x(m_radint * o_game.escint * d, 210),
    y + lengthdir_y(m_radint * o_game.escint * d, 210),
    o_tensor);
mach[m_tensagolp] = instance_create(
    x + lengthdir_x(m_radint * o_game.escint * d, 330),
    y + lengthdir_y(m_radint * o_game.escint * d, 330),
    o_tensor);

mach[m_bodega] = instance_create(
    x + lengthdir_x(m_radint * o_game.escint * d, 240),
    y + lengthdir_y(m_radint * o_game.escint * d, 240),
    o_grua);

mach[m_comida] = instance_create(
    x + lengthdir_x(m_radint * o_game.escint * d, 300),
    y + lengthdir_y(m_radint * o_game.escint * d, 300),
    o_alimento);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !o_game.pausa
{
    if s_chequeorobot(id, m_todomalo)
    {
        if random(1) &lt;= 0.1
        {
            var myd = id;
            with o_robot
            {
                if origen == myd
                {
                    s_particulas(x + 16 - irandom(32),
                        y + 16 - irandom(32), true, 0);
                }
            }
            if random(1) &lt;= 0.7
            {
                audio_play_sound(a_bot_fuego, 5, false);
            }
        }
    }
    else
    {
        //calcular cambios de temperatura
        calor = clamp(calor - dlt * (m_calor / m_natufrio), 0, m_calor);
        if sobrecal
        {
            if calor &lt;= m_calor * 0.75
            {
                sobrecal = false;
            }
            else if random(1) &lt;= 0.1
            {
                var myd = id;
                with o_robot
                {
                    if origen == myd
                    {
                        s_particulas(x + 16 - irandom(32),
                            y + 16 - irandom(32), true, 1);
                    }
                }
                if random(1) &lt;= 0.7
                {
                    audio_play_sound(a_bot_sobrecal, 5, false);
                }
            }
        }
        else
        {
            if calor &gt;= m_calor * 0.95
            {
                sobrecal = true;
            }
        }
        
        //particulas internas juego por vidas
        if o_game.onepunch
        {
            if random(1) &lt; 0.5 * (1 - vidas / o_game.maxvidas)
            {
                s_particulas(
                    x + (m_radint - irandom(m_radint * 2)) * o_game.escint * 0.65,
                    y + (m_radint - irandom(m_radint * 2)) * o_game.escint * 0.65,
                    false, 1);
            }
        }
        
        //intermitencia cabeza
        if !cabeza
        {
            reloj_cabeza += dlt;
            if reloj_cabeza &gt;= m_reactiva
            {
                reloj_cabeza = 0;
                laser = choose(true, false);
            }
        }
        
        //verificar autodestruccion
        var quiet = true;
        var myid = id;
        with o_jugador
        {
            if instance_nearest(x, y, o_salon) == myid and quien &lt; m_rosado
            {
                if maquina != -1 or (xxp != xx or yyp != yy)
                {
                    quiet = false;
                }
            }
        }
        if quiet
        {
            var via = floor(autodestruir / 1000000);
            autodestruir -= dlt
            if autodestruir &lt;= 0
            {
                with o_robot
                {
                    if origen == myid
                    {
                        s_calculadamage(id, 0, true)
                    }
                }
            }
            else if via &lt;= 5
            {
                if via != floor(autodestruir / 1000000)
                {
                    with o_robot
                    {
                        if origen == myid
                        {
                            var aux = instance_create(x, y + 1, o_cuentabum);
                            aux.numero = string(via);
                        }
                    }
                }
            }
        }
        else
        {
            autodestruir = 20000000;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(d_int_suelo, 0, x, y, o_game.escint, o_game.escint, 0, c_white, 1);

with o_jugador
{
    draw_sprite_ext(d_sombra, 0, xx, yy,
        o_game.escint, o_game.escint, 0, c_white, 1);
}

var bv = 180 * o_game.escint;
if y &gt; room_height * 0.5
{
    bv *= -1;
}
draw_rectangle_colour(x - 80 * o_game.escint, y + bv,
    x + 80 * o_game.escint, y + bv - 6 * o_game.escint,
    c_gray, c_gray, c_gray, c_gray, false);
draw_rectangle_colour(x - 80 * o_game.escint, y + bv,
    x - 80 * o_game.escint + (calor / m_calor) * 160 * o_game.escint,
    y + bv - 6 * o_game.escint, c_orange, c_orange, c_orange, c_orange, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
